{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development-X220\\\\NODEJS\\\\submit\\\\react-client\\\\src\\\\ClientMain.js\";\nimport React from \"react\";\nimport \"./ClientMain.css\";\nimport ConnectServer from \"./ConnectServer\";\nimport ServerResponses from \"./ServerResponses\";\n\nclass ClientMain extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.connectServerCallback = dataFromChild => {\n      const info = JSON.parse(dataFromChild);\n\n      if (info.ip && info.port) {\n        // Connect with the address & Port given from the user\n        this.setState({\n          connectionEstablished: true\n        });\n\n        const io = require(\"socket.io-client\"),\n              address = \"\".concat(info.ip, \":\").concat(info.port),\n              ioClient = io.connect(address);\n\n        console.log(\"Connected to address \".concat(address));\n        ioClient.on(\"actiondetails\", msg => {\n          const serverResponsesList = this.state.serverResponsesList;\n          var parsed = JSON.parse(msg);\n          var response = new Object();\n          response.id = serverResponsesList.length;\n          response.actionType = parsed.actionType;\n          response.vendorId = parsed.vendorId;\n          response.productId = parsed.productId;\n          response.deviceName = parsed.deviceName;\n          response.manufacturer = parsed.manufacturer;\n          const newServerResponsesList = [response, ...serverResponsesList]; // serverResponsesList.push(response);\n\n          this.setState({\n            serverResponsesList: newServerResponsesList\n          });\n        });\n      }\n    };\n\n    this.renderConnectServer = this.renderConnectServer.bind(this);\n    this.state = {\n      connectionEstablished: false,\n      serverSentResponse: false,\n      serverResponsesList: []\n    };\n  }\n\n  componentDidMount() {}\n  /**\r\n   *  Render Server Connection conditionally\r\n   *  Only if the the connection has not been established\r\n   */\n\n\n  renderConnectServer() {\n    const connectionEstablished = this.state.connectionEstablished;\n\n    if (!connectionEstablished) {\n      return React.createElement(ConnectServer, {\n        clientMainCallback: this.connectServerCallback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      });\n    }\n  }\n  /**\r\n   * Render Server responses screen after connection has been established\r\n   */\n\n\n  renderServerResponses() {\n    const connectionEstablished = this.state.connectionEstablished;\n\n    if (connectionEstablished) {\n      const serverResponsesList = this.state.serverResponsesList;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Server Responses\"), React.createElement(ServerResponses, {\n        listOfResponses: serverResponsesList,\n        clientMainCallback: this.handleServerResponsesCallback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }));\n    }\n  }\n\n  connectServerResponses(serverResponsesIsDone) {\n    if (serverResponsesIsDone === true) {// TODO\n    }\n  }\n\n  handleServerResponsesCallback(todo) {} // TODO\n\n  /**\r\n   * Address = \"http://localhost:8000\"\r\n   * Port = 8000\r\n   */\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"season-display Summer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, this.renderConnectServer(), this.renderServerResponses());\n  }\n\n}\n\nexport default ClientMain;","map":{"version":3,"sources":["C:\\Development-X220\\NODEJS\\submit\\react-client\\src\\ClientMain.js"],"names":["React","ConnectServer","ServerResponses","ClientMain","Component","constructor","props","connectServerCallback","dataFromChild","info","JSON","parse","ip","port","setState","connectionEstablished","io","require","address","ioClient","connect","console","log","on","msg","serverResponsesList","state","parsed","response","Object","id","length","actionType","vendorId","productId","deviceName","manufacturer","newServerResponsesList","renderConnectServer","bind","serverSentResponse","componentDidMount","renderServerResponses","handleServerResponsesCallback","connectServerResponses","serverResponsesIsDone","todo","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./ClientMain.css\";\r\nimport ConnectServer from \"./ConnectServer\";\r\nimport ServerResponses from \"./ServerResponses\";\r\n\r\nclass ClientMain extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.renderConnectServer = this.renderConnectServer.bind(this);\r\n    this.state = {\r\n      connectionEstablished: false,\r\n      serverSentResponse: false,\r\n      serverResponsesList: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  /**\r\n   *  Render Server Connection conditionally\r\n   *  Only if the the connection has not been established\r\n   */\r\n  renderConnectServer() {\r\n    const { connectionEstablished } = this.state;\r\n    if (!connectionEstablished) {\r\n      return <ConnectServer clientMainCallback={this.connectServerCallback} />;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render Server responses screen after connection has been established\r\n   */\r\n  renderServerResponses() {\r\n    const { connectionEstablished } = this.state;\r\n    if (connectionEstablished) {\r\n      const { serverResponsesList } = this.state;\r\n      return (\r\n        <div>\r\n          <h1>Server Responses</h1>\r\n          \r\n          <ServerResponses\r\n            listOfResponses={serverResponsesList}\r\n            clientMainCallback={this.handleServerResponsesCallback}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  connectServerResponses(serverResponsesIsDone) {\r\n    if (serverResponsesIsDone === true) {\r\n      // TODO\r\n    }\r\n  }\r\n\r\n  handleServerResponsesCallback(todo) {\r\n    // TODO\r\n  }\r\n\r\n  /**\r\n   * Address = \"http://localhost:8000\"\r\n   * Port = 8000\r\n   */\r\n  connectServerCallback = dataFromChild => {\r\n    const info = JSON.parse(dataFromChild);\r\n    if (info.ip && info.port) {\r\n      // Connect with the address & Port given from the user\r\n      this.setState({ connectionEstablished: true });\r\n      const io = require(\"socket.io-client\"),\r\n        address = `${info.ip}:${info.port}`,\r\n        ioClient = io.connect(address);\r\n\r\n      console.log(`Connected to address ${address}`);\r\n\r\n      ioClient.on(\"actiondetails\", msg => {\r\n        const { serverResponsesList } = this.state;\r\n        var parsed = JSON.parse(msg);\r\n        var response = new Object();\r\n        response.id = serverResponsesList.length;\r\n        response.actionType = parsed.actionType;\r\n        response.vendorId = parsed.vendorId;\r\n        response.productId = parsed.productId;\r\n        response.deviceName = parsed.deviceName;\r\n        response.manufacturer = parsed.manufacturer;\r\n        const newServerResponsesList = [response, ...serverResponsesList];\r\n        // serverResponsesList.push(response);\r\n        this.setState({ serverResponsesList: newServerResponsesList });\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={`season-display Summer`}>\r\n        {this.renderConnectServer()}\r\n        {this.renderServerResponses()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClientMain;\r\n"]},"metadata":{},"sourceType":"module"}