{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development-X220\\\\NODEJS\\\\submit\\\\react-client\\\\src\\\\ClientMain.js\";\nimport React from \"react\";\nimport { Button, ButtonToolbar } from \"react-bootstrap\";\nimport \"./ClientMain.css\";\nimport ConnectServer from \"./ConnectServer\";\nimport ServerResponses from \"./ServerResponses\";\n\nclass ClientMain extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.connectServerCallback = dataFromChild => {\n      const info = JSON.parse(dataFromChild);\n\n      if (info.ip && info.port) {\n        // Connect with the address & Port given from the user\n        this.setState({\n          connectionEstablished: true\n        });\n\n        const io = require(\"socket.io-client\"),\n              address = \"\".concat(info.ip, \":\").concat(info.port),\n              ioClient = io.connect(address); // keep IO client in state\n\n\n        this.setState({\n          ioClient: ioClient\n        });\n        console.log(\"Connected to address \".concat(address));\n        ioClient.on(\"actiondetails\", msg => {\n          const serverResponsesList = this.state.serverResponsesList;\n          var parsed = JSON.parse(msg);\n          var response = new Object();\n          response.id = serverResponsesList.length;\n          response.actionType = parsed.actionType;\n          response.vendorId = parsed.vendorId;\n          response.productId = parsed.productId;\n          response.deviceName = parsed.deviceName;\n          response.manufacturer = parsed.manufacturer;\n          const newServerResponsesList = [response, ...serverResponsesList]; // serverResponsesList.push(response);\n\n          this.setState({\n            serverResponsesList: newServerResponsesList\n          });\n        });\n      }\n    };\n\n    this.renderConnectServer = this.renderConnectServer.bind(this);\n    this.backReconnect = this.backReconnect.bind(this);\n    this.state = {\n      connectionEstablished: false,\n      serverSentResponse: false,\n      serverResponsesList: [],\n      ioClient: null\n    };\n  }\n\n  componentDidMount() {}\n  /**\r\n   *  Render Server Connection conditionally\r\n   *  Only if the the connection has not been established\r\n   */\n\n\n  renderConnectServer() {\n    const connectionEstablished = this.state.connectionEstablished;\n\n    if (!connectionEstablished) {\n      return React.createElement(ConnectServer, {\n        clientMainCallback: this.connectServerCallback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      });\n    }\n  }\n\n  backReconnect() {\n    this.setState({\n      connectionEstablished: false,\n      serverSentResponse: false\n    });\n    const ioClient = this.state.ioClient;\n\n    try {\n      ioClient.disconnect();\n    } catch (error) {\n      alert(error.message);\n    }\n  }\n  /**\r\n   * Render Server responses screen after connection has been established\r\n   */\n\n\n  renderServerResponses() {\n    const connectionEstablished = this.state.connectionEstablished;\n\n    if (connectionEstablished) {\n      const serverResponsesList = this.state.serverResponsesList;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Server Responses\"), React.createElement(ServerResponses, {\n        listOfResponses: serverResponsesList,\n        clientMainCallback: this.handleServerResponsesCallback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }));\n    }\n  }\n  /**\r\n   * Render the exit button , used when we're already logged in an we want to\r\n   * get out to the main screen\r\n   */\n\n\n  renderExitButton() {\n    const connectionEstablished = this.state.connectionEstablished;\n\n    if (connectionEstablished) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(ButtonToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"secondary\",\n        className: \"exitBtn\",\n        onClick: this.backReconnect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Change IP/Port\")), \";\");\n    }\n  }\n\n  handleServerResponsesCallback(todo) {} // TODO : in the future when we'd need to add more logic\n\n  /**\r\n   * Example Address = \"http://localhost\"\r\n   * Example Port = 8000\r\n   */\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"season-display centering Summer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, this.renderExitButton(), this.renderConnectServer(), this.renderServerResponses());\n  }\n\n}\n\nexport default ClientMain;","map":{"version":3,"sources":["C:\\Development-X220\\NODEJS\\submit\\react-client\\src\\ClientMain.js"],"names":["React","Button","ButtonToolbar","ConnectServer","ServerResponses","ClientMain","Component","constructor","props","connectServerCallback","dataFromChild","info","JSON","parse","ip","port","setState","connectionEstablished","io","require","address","ioClient","connect","console","log","on","msg","serverResponsesList","state","parsed","response","Object","id","length","actionType","vendorId","productId","deviceName","manufacturer","newServerResponsesList","renderConnectServer","bind","backReconnect","serverSentResponse","componentDidMount","disconnect","error","alert","message","renderServerResponses","handleServerResponsesCallback","renderExitButton","todo","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button, ButtonToolbar } from \"react-bootstrap\";\r\nimport \"./ClientMain.css\";\r\nimport ConnectServer from \"./ConnectServer\";\r\nimport ServerResponses from \"./ServerResponses\";\r\n\r\nclass ClientMain extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.renderConnectServer = this.renderConnectServer.bind(this);\r\n    this.backReconnect = this.backReconnect.bind(this);\r\n    this.state = {\r\n      connectionEstablished: false,\r\n      serverSentResponse: false,\r\n      serverResponsesList: [],\r\n      ioClient: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  /**\r\n   *  Render Server Connection conditionally\r\n   *  Only if the the connection has not been established\r\n   */\r\n  renderConnectServer() {\r\n    const { connectionEstablished } = this.state;\r\n    if (!connectionEstablished) {\r\n      return <ConnectServer clientMainCallback={this.connectServerCallback} />;\r\n    }\r\n  }\r\n\r\n  backReconnect() {\r\n    this.setState({ connectionEstablished: false, serverSentResponse: false });\r\n    const { ioClient } = this.state;    \r\n    \r\n    try {\r\n      ioClient.disconnect();\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render Server responses screen after connection has been established\r\n   */\r\n  renderServerResponses() {\r\n    const { connectionEstablished } = this.state;\r\n    if (connectionEstablished) {\r\n      const { serverResponsesList } = this.state;\r\n      return (\r\n        <div>\r\n          <h1>Server Responses</h1>\r\n          <ServerResponses\r\n            listOfResponses={serverResponsesList}\r\n            clientMainCallback={this.handleServerResponsesCallback}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the exit button , used when we're already logged in an we want to\r\n   * get out to the main screen\r\n   */\r\n  renderExitButton() {\r\n    const { connectionEstablished } = this.state;\r\n    if (connectionEstablished) {\r\n      return (\r\n        <div>\r\n          <ButtonToolbar>\r\n            <Button\r\n              variant=\"secondary\"\r\n              className=\"exitBtn\"\r\n              onClick={this.backReconnect}\r\n            >\r\n              Change IP/Port\r\n            </Button>\r\n          </ButtonToolbar>\r\n          ;\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  handleServerResponsesCallback(todo) {\r\n    // TODO : in the future when we'd need to add more logic\r\n  }\r\n\r\n  /**\r\n   * Example Address = \"http://localhost\"\r\n   * Example Port = 8000\r\n   */\r\n  connectServerCallback = dataFromChild => {\r\n    const info = JSON.parse(dataFromChild);\r\n    if (info.ip && info.port) {\r\n      // Connect with the address & Port given from the user\r\n      this.setState({ connectionEstablished: true });\r\n      const io = require(\"socket.io-client\"),\r\n        address = `${info.ip}:${info.port}`,\r\n        ioClient = io.connect(address);\r\n\r\n      // keep IO client in state\r\n      this.setState({ ioClient: ioClient });\r\n      console.log(`Connected to address ${address}`);\r\n\r\n      ioClient.on(\"actiondetails\", msg => {\r\n        const { serverResponsesList } = this.state;\r\n        var parsed = JSON.parse(msg);\r\n        var response = new Object();\r\n        response.id = serverResponsesList.length;\r\n        response.actionType = parsed.actionType;\r\n        response.vendorId = parsed.vendorId;\r\n        response.productId = parsed.productId;\r\n        response.deviceName = parsed.deviceName;\r\n        response.manufacturer = parsed.manufacturer;\r\n        const newServerResponsesList = [response, ...serverResponsesList];\r\n        // serverResponsesList.push(response);\r\n        this.setState({ serverResponsesList: newServerResponsesList });\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={`season-display centering Summer`}>\r\n        {this.renderExitButton()}\r\n        {this.renderConnectServer()}\r\n        {this.renderServerResponses()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClientMain;\r\n"]},"metadata":{},"sourceType":"module"}